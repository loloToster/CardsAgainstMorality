generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique @default(cuid())
  displayName String     @map("display_name")
  picture     String?
  lastUsed    DateTime?  @map("last_used")
  strategyId  String     @map("strategy_id")
  likedPacks  CardPack[] @relation("likes")
  packs       CardPack[] @relation("owns")

  @@map("users")
}

model CardPack {
  id            String          @id @default(uuid())
  name          String
  official      Boolean         @default(false)
  typeId        Int             @map("type_id")
  type          CardPackType    @relation(fields: [typeId], references: [id])
  bundleId      Int?            @map("bundle_id")
  bundle        CardPackBundle? @relation(fields: [bundleId], references: [id])
  icon          String?
  color         String?
  tags          CardPackTag[]
  blackCards    BlackCard[]
  whiteCards    WhiteCard[]
  numberOfCards Int             @default(0) @map("number_of_cards")
  likedBy       User[]          @relation("likes")
  owner         User?           @relation("owns", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       Int?            @map("owner_id")
  private       Boolean         @default(false)

  @@map("card_packs")
}

model CardPackType {
  id    Int        @id @default(autoincrement())
  name  String
  packs CardPack[]

  @@map("card_pack_types")
}

model CardPackBundle {
  id    Int        @id @default(autoincrement())
  name  String
  packs CardPack[]

  @@map("card_pack_bundles")
}

model CardPackTag {
  id    Int        @id @default(autoincrement())
  name  String
  packs CardPack[]

  @@map("card_pack_tags")
}

model Icon {
  name   String @id
  search String
}

model BlackCard {
  id     Int      @id @default(autoincrement())
  text   String
  pick   Int?
  draw   Int?
  packId String   @map("pack_id")
  pack   CardPack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@map("black_cards")
}

model WhiteCard {
  id     Int      @id @default(autoincrement())
  text   String
  packId String   @map("pack_id")
  pack   CardPack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@map("white_cards")
}
